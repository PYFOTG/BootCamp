#Chapter1. CSS 기초
  1-1. CSS와 프론트엔드 개발
    1) CSS (Cascading Style Sheets)
      - 웹 페이지 스타일 및 레이아웃을 정의하는 스타일시트 언어
      - CSS는 스타일링 도구이므로, 독립적으로 기능하지 않음. 반드시 HTML이 있어야만 동작함
      
  1-2. CSS 따라하기
    1) CSS로 기본적인 스타일링 하기
    2) CSS 내용 분해하기
      - css의 문법 구성:
        셀렉터 { (선언블록 열기)
                선언(= 속성명 속성값 선언구분자로 구성)
                선언
              } (선언블록 닫기)
        body{
              color: red;
              font-size: 30px;
            }
    
    3) CSS 파일 추가
      - CSS 파일을 HTML 파일에 연결할 때
        : <link rel="stylesheet" href="index.css" /> 와 같은 형태로 연결
      
      -✨ CSS 스타일을 적용하는 방법
        (1) 인라인 스타일
          : 같은 줄에서 스타일을 적용하는 방식
          
        (2) 내부 스타일 시트
          : CSS파일 내에 작성하는 내용을 별도의 파일로 구분하지 않고 <style>요소 내에 작성하는 내부 스타일 시트
          
        (3)✨ 외부 스타일 시트
          : <link rel="stylesheet" href="index.css" /> 와 같은 형태로 외부 .css파일과 연결하는 방식
    
    4)✨ 기본적인 셀렉터(selector)
      (1) id로 이름 붙여서 스타일링 적용하기
        - html 파일에서, 엘리먼트에 id를 붙여서 요소를 정확하게 선택 할 수 있음
        - 그 다음 css 파일에서, id가 있는 요소를 #기호를 이용해 스타일링 함
          ex)
          <h4 id="navigation-title">This is the navigation section.</h4> // html
          #navigation-title { color: red; } // css
      
      (2) class로 스타일을 분류하여 적용하기
        - html 파일에서, 엘리먼트에 class를 붙여서 요소를 정확하게 선택 할 수 있음
        - 그 다음 css 파일에서, class가 있는 요소를 .기호를 이용해 스타일링 함
          ex)
          <li class="menu-item">Home</li> // html
          .menu-item { text-decoration: underline; } // css
      
      (3) 여러 개의 class를 하나의 엘리먼트에 적용하기
        - 여러 class를 하나의 요소에 적용하기 : 띄어쓰기로 적용하려는 class들의 이름을 구분하면 됨
          ex)
          <li class="menu-item selected">Home</li> // html
          .selected { font-weight: bold; color: #009999; } // css
        
        + * 요소를 만들거나, 요소에 스타일링을 적용할 때는 이름과 목적이 일치하는지 확인해야함
        
        
      (*)✨ id와 class의 차이점
        - id: #으로 선택 / class: .으로 선택
        - id: 한 문서에 단 하나의 요소에만 적용 / class: 동일한 값을 갖는 요소 많음
        - id: 특정 요소에 이름을 붙이는데 사용 / class: 스타일의 분류에 사용

  1-3.✨ 텍스트 꾸미기
    1) 색상
      - 글자의 색상을 변경하는 속성은 color
      - 속성에 삽입할 수 있는 값은
        (1) HEX (16진수로 RGB; Red Green Blue가 표현된 값)
        (2) 주요 색상의 이름
      - 글자 색상(color)이나 배경색(backfround-color), 테두리(border-color)색상도 지정 가능
      
    2) 글꼴
      - 글꼴의 속성은 font-family
      - fallback은 표현하고 싶은 글꼴이 없거나 사용할 수 없는 경우를 위한 대비책
        fallback을 위해 여러 글꼴을 사용하는 경우, 쉼표로 구분하여 입력할 수 있음
        입력된 순서대로 fallback이 적용됨
        ex)
        .emphasize {
          font-family: "SF Pro KR", "MalgunGothic", "Verdana";
        }
      - 웹 폰트 기술을 통해 다양한 글꼴 사용가능
    
    3) 크기
      - 글자의 크기를 변경하기 위해서는 font-size 속성을 사용
      ex)
      .title { font-size: 24px; }
    
    4) 기타 스타일링
      - 굵기: font-weight
      - 밑줄, 가로줄: text-decoration
      - 자간: letter-spacing
      - 행간: line-height
    
    5) 정렬
      (1) 가로 정렬
        - 가로로 정렬할 경우 text-align을 사용
        - 유효한 값으로는 left, right, center, justify(양쪽 정렬)가 있음
        
      (2) 세로 정렬
        - 세로 정렬은 정렬하고자 하는 글자를 둘러싸고 있는 박스의 높이가 글자 높이보다 큰 경우에만 적용가능
        - vertical-align 속성은 부모 요소의 display 속성이 반드시 table-cell이어야 사용가능함
        - 박스 모델 및 레이아웃을 통해 세로정렬을 문제를 해결해야함
    
    6) 태그 사용
      - <li> 태그의 경우에는 항상 bullet이 등장하고, 왼쪽에 여백이 있음
      + <center> <font>를 사용하지 말아야 하는 이유
        ㄴ HTML의 초기에는, 스타일을 별개로 정의한다는 컨셉이 없었음
        ㄴ 그래서 <center>가운데 정렬</center> 혹은 <font color="#ff0000">빨간 글자</font>와 같이 사용
        ㄴ 그러나 지금은 관심사 분리라는 패러다임을 적용
        ㄴ HTML 파일로는 구조를 설계하는 일에만 신경 쓰고, CSS 파일로는 스타일링만 담당
    
  1-4. 절대 단위와 상대 단위
    1) 알아야 할 몇 가지 단위
      - 크기의 단위는 절대 단위와 상대 단위, 두 가지로 구분
      -✨ 절대단위: px, pt 등
      -✨ 상대단위: %, em, rem, ch, vw, vh 등
      
      (1) 글꼴 사이즈를 정할 때
        a. 기기나 브라우저 사이즈 등의 환경에 영향을 받지 않는 절대적인 크기로 정하는 경우
          - px(픽셀)을 사용 // 픽셀은 크기가 고정된 절대 단위이기 때문에 사용자 접근성이 불리
          - 픽셀은 모바일 기기처럼 작은 화면이면서, 동시에 고해상도인 경우에도 적합하지 않음
          - 고해상도에서는 1px이 모니터의 한 점보다 크게 업스케일(upscale)됨. 따라서
            뚜렷하지 못한 형태로 출력되는 경우도 있음
          - 화면의 사이즈가 정해진 경우에 유리
          
        b. 일반적인 경우
          - 상대 단위인 rem 사용 추천
          - root의 글자 크기, 즉 브라우저의 기본 글자 크기가 1rem
            두 배로 크게 하고 싶다면 2rem, 작게 하려면 0.8rem 등으로 조절해서 사용 가능
          - 접근성에 유리
          - em은 부모 엘리먼트에 따라 상대적으로 크기가 변경되므로 계산이 어려움
            반면 rem은 root의 글자 크기에 따라서만 상대적으로 변함
        
      (2) 화면 사이즈를 정할 때
        a. 반응형 웹(responsive web)에서 기준점을 만들 때
          - 반응형 웹: 디바이스의 너비(width)에 따라 유동적인 레이아웃이 적용되는 웹사이트
          - 디바이스 크기를 나누는 기준을 보통 px로 정함
          - 보통 450px 미만의 너비를 갖는 디바이스는 스마트폰 세로 모드로 생각해도 좋음 
          
        b.화면 너비나 높이에 따른 상대적인 크기가 중요한 경우
          - vw(: viewport width), vh(: viewport height)를 사용
          - Viewport: 웹사이트의 보이는 영역
          - 1vw 는 보이는 영역 너비의 1/100, 1vh 는 보이는 영역 높이의 1/100
          - 화면을 가득 채우며 딱 떨어지게 스크롤 되는 사이트는 보통 100vw, 100vh 를 사용
          - 참고로 <body> 태그에서의 %는 HTML이 차지하는 모든 영역을 의미
            즉, 지금은 보이지 않으나 스크롤 했을 때 보이는 영역까지 포함했을 때 비율
    
#Chapter2. 박스모델

#Chapter3. CSS Selector
