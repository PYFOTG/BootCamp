#Chapter1. CSS 기초
  1-1. CSS와 프론트엔드 개발
    1) CSS (Cascading Style Sheets)
      - 웹 페이지 스타일 및 레이아웃을 정의하는 스타일시트 언어
      - CSS는 스타일링 도구이므로, 독립적으로 기능하지 않음. 반드시 HTML이 있어야만 동작함
      
  1-2. CSS 따라하기
    1) CSS로 기본적인 스타일링 하기
    2) CSS 내용 분해하기
      - css의 문법 구성:
        셀렉터 { (선언블록 열기)
                선언(= 속성명 속성값 선언구분자로 구성)
                선언
              } (선언블록 닫기)
        body{
              color: red;
              font-size: 30px;
            }
    
    3) CSS 파일 추가
      - CSS 파일을 HTML 파일에 연결할 때
        : <link rel="stylesheet" href="index.css" /> 와 같은 형태로 연결
      
      -✨ CSS 스타일을 적용하는 방법
        (1) 인라인 스타일
          : 같은 줄에서 스타일을 적용하는 방식
          
        (2) 내부 스타일 시트
          : CSS파일 내에 작성하는 내용을 별도의 파일로 구분하지 않고 <style>요소 내에 작성하는 내부 스타일 시트
          
        (3)✨ 외부 스타일 시트
          : <link rel="stylesheet" href="index.css" /> 와 같은 형태로 외부 .css파일과 연결하는 방식
    
    4)✨ 기본적인 셀렉터(selector)
      (1) id로 이름 붙여서 스타일링 적용하기
        - html 파일에서, 엘리먼트에 id를 붙여서 요소를 정확하게 선택 할 수 있음
        - 그 다음 css 파일에서, id가 있는 요소를 #기호를 이용해 스타일링 함
          ex)
          <h4 id="navigation-title">This is the navigation section.</h4> // html
          #navigation-title { color: red; } // css
      
      (2) class로 스타일을 분류하여 적용하기
        - html 파일에서, 엘리먼트에 class를 붙여서 요소를 정확하게 선택 할 수 있음
        - 그 다음 css 파일에서, class가 있는 요소를 .기호를 이용해 스타일링 함
          ex)
          <li class="menu-item">Home</li> // html
          .menu-item { text-decoration: underline; } // css
      
      (3) 여러 개의 class를 하나의 엘리먼트에 적용하기
        - 여러 class를 하나의 요소에 적용하기 : 띄어쓰기로 적용하려는 class들의 이름을 구분하면 됨
          ex)
          <li class="menu-item selected">Home</li> // html
          .selected { font-weight: bold; color: #009999; } // css
        
        + * 요소를 만들거나, 요소에 스타일링을 적용할 때는 이름과 목적이 일치하는지 확인해야함
        
        
      (*)✨ id와 class의 차이점
        - id: #으로 선택 / class: .으로 선택
        - id: 한 문서에 단 하나의 요소에만 적용 / class: 동일한 값을 갖는 요소 많음
        - id: 특정 요소에 이름을 붙이는데 사용 / class: 스타일의 분류에 사용

  1-3.✨ 텍스트 꾸미기
    1) 색상
      - 글자의 색상을 변경하는 속성은 color
      - 속성에 삽입할 수 있는 값은
        (1) HEX (16진수로 RGB; Red Green Blue가 표현된 값)
        (2) 주요 색상의 이름
      - 글자 색상(color)이나 배경색(backfround-color), 테두리(border-color)색상도 지정 가능
      
    2) 글꼴
      - 글꼴의 속성은 font-family
      - fallback은 표현하고 싶은 글꼴이 없거나 사용할 수 없는 경우를 위한 대비책
        fallback을 위해 여러 글꼴을 사용하는 경우, 쉼표로 구분하여 입력할 수 있음
        입력된 순서대로 fallback이 적용됨
        ex)
        .emphasize {
          font-family: "SF Pro KR", "MalgunGothic", "Verdana";
        }
      - 웹 폰트 기술을 통해 다양한 글꼴 사용가능
    
    3) 크기
      - 글자의 크기를 변경하기 위해서는 font-size 속성을 사용
      ex)
      .title { font-size: 24px; }
    
    4) 기타 스타일링
      - 굵기: font-weight
      - 밑줄, 가로줄: text-decoration
      - 자간: letter-spacing
      - 행간: line-height
    
    5) 정렬
      (1) 가로 정렬
        - 가로로 정렬할 경우 text-align을 사용
        - 유효한 값으로는 left, right, center, justify(양쪽 정렬)가 있음
        
      (2) 세로 정렬
        - 세로 정렬은 정렬하고자 하는 글자를 둘러싸고 있는 박스의 높이가 글자 높이보다 큰 경우에만 적용가능
        - vertical-align 속성은 부모 요소의 display 속성이 반드시 table-cell이어야 사용가능함
        - 박스 모델 및 레이아웃을 통해 세로정렬을 문제를 해결해야함
    
    6) 태그 사용
      - <li> 태그의 경우에는 항상 bullet이 등장하고, 왼쪽에 여백이 있음
      + <center> <font>를 사용하지 말아야 하는 이유
        ㄴ HTML의 초기에는, 스타일을 별개로 정의한다는 컨셉이 없었음
        ㄴ 그래서 <center>가운데 정렬</center> 혹은 <font color="#ff0000">빨간 글자</font>와 같이 사용
        ㄴ 그러나 지금은 관심사 분리라는 패러다임을 적용
        ㄴ HTML 파일로는 구조를 설계하는 일에만 신경 쓰고, CSS 파일로는 스타일링만 담당
    
  1-4. 절대 단위와 상대 단위
    1) 알아야 할 몇 가지 단위
      - 크기의 단위는 절대 단위와 상대 단위, 두 가지로 구분
      -✨ 절대단위: px, pt 등
      -✨ 상대단위: %, em, rem, ch, vw, vh 등
      
      (1) 글꼴 사이즈를 정할 때
        a. 기기나 브라우저 사이즈 등의 환경에 영향을 받지 않는 절대적인 크기로 정하는 경우
          - px(픽셀)을 사용 // 픽셀은 크기가 고정된 절대 단위이기 때문에 사용자 접근성이 불리
          - 픽셀은 모바일 기기처럼 작은 화면이면서, 동시에 고해상도인 경우에도 적합하지 않음
          - 고해상도에서는 1px이 모니터의 한 점보다 크게 업스케일(upscale)됨. 따라서
            뚜렷하지 못한 형태로 출력되는 경우도 있음
          - 화면의 사이즈가 정해진 경우에 유리
          
        b. 일반적인 경우
          - 상대 단위인 rem 사용 추천
          - root의 글자 크기, 즉 브라우저의 기본 글자 크기가 1rem
            두 배로 크게 하고 싶다면 2rem, 작게 하려면 0.8rem 등으로 조절해서 사용 가능
          - 접근성에 유리
          - em은 부모 엘리먼트에 따라 상대적으로 크기가 변경되므로 계산이 어려움
            반면 rem은 root의 글자 크기에 따라서만 상대적으로 변함
        
      (2) 화면 사이즈를 정할 때
        a. 반응형 웹(responsive web)에서 기준점을 만들 때
          - 반응형 웹: 디바이스의 너비(width)에 따라 유동적인 레이아웃이 적용되는 웹사이트
          - 디바이스 크기를 나누는 기준을 보통 px로 정함
          - 보통 450px 미만의 너비를 갖는 디바이스는 스마트폰 세로 모드로 생각해도 좋음 
          
        b.화면 너비나 높이에 따른 상대적인 크기가 중요한 경우
          - vw(: viewport width), vh(: viewport height)를 사용
          - Viewport: 웹사이트의 보이는 영역
          - 1vw 는 보이는 영역 너비의 1/100, 1vh 는 보이는 영역 높이의 1/100
          - 화면을 가득 채우며 딱 떨어지게 스크롤 되는 사이트는 보통 100vw, 100vh 를 사용
          - 참고로 <body> 태그에서의 %는 HTML이 차지하는 모든 영역을 의미
            즉, 지금은 보이지 않으나 스크롤 했을 때 보이는 영역까지 포함했을 때 비율
    
#Chapter2. 박스모델
  - 하나의 웹 페이지 내에 있는 모든 콘텐츠는 고유의 영역을 가짐
    그 영역은 항상 직사각형으로 이루어져 있기 때문에, 박스(box)라고 부름
    
  * S1 Unit5 / practice.html, practice.css 파일에서
    - 위 HTML에서 줄 바꿈이 적용되는 요소는 무엇인가요? 줄 바꿈이 적용되지 않은 요소는 무엇인가요?
      : 줄 바꿈이 되는 요소: <h1>, <p>
      : 줄 바꿈이 되지 않는 요소: <span>

    - 위 CSS 코드에서 실제로 작동하지 않는 것이 존재합니다. 무엇일까요?
      : <span> // 위 예제에서 <span> 요소의 경우는 width, height 속성이 적용되지 않았음
  
  2-1.✨ 박스모델 기초
    1) 모든 콘텐츠는 각자의 영역을 가진다.
      - 일반적으로 하나의 콘텐츠로 묶이는 요소들이 하나의 박스가 됨
      - 박스는 항상 직사각형이고, 너비(width)와 높이(height)를 가짐
      
    2) 줄 바꿈이 되는 박스(block) vs. 옆으로 붙는 박스(inline, inline-block)
      - 박스의 종류는 줄 바꿈이 되는 block 박스와
        줄 바꿈이 일어나지 않고, 크기 지정을 할 수 없는 inline 박스로 구분됨
      - 두 가지 박스 종류의 특징이 섞인,
        줄 바꿈이 일어나지 않는 동시에 + block 박스의 특징을 가지는 inline-block 박스도 존재
        
      - 따라서, <h1>, <p> 등의 요소는 block 박스 / <span> 요소는 inline 박스
      - 개발자 도구를 열고, 개발자 도구의 Elements 탭에서 작성한 요소가 어떤 박스인지 확인 가능함
      
      * block 요소의 목록
        https://developer.mozilla.org/en-US/docs/Web/HTML/Block-level_elements
      * inline 요소의 목록
        https://developer.mozilla.org/en-US/docs/Web/HTML/Inline_elements
        
      - block 요소의 대표적인 예
        : <div>, <p>
      - inline 요소의 대표적인 예
        : <span>
      
      - block 박스에는 width, height 속성이 적용됨
      - inline 박스는 width, height 속성이 적용되지 않음
      - inline-block 박스는 inline 박스처럼 다른 요소의 옆으로 붙으면서, 자체적으로 고유의 크기를 가짐
      
      * block, inline-block, inline의 특징 정리
        (1) block
          // 줄바꿈 여부: 줄바꿈이 일어남
          // 기본적으로 갖는 너비: 100%
          // width, height 사용 가능 여부: 가능
        (2) inline-block
          // 줄바꿈 여부: 줄바꿈이 일어나지 않음
          // 기본적으로 갖는 너비: 글자가 차지하는 만큼
          // width, height 사용 가능 여부: 가능
        (3) inline
          // 줄바꿈 여부 : 줄바꿈이 일어나지 않음
          // 기본적으로 갖는 너비: 글자가 차지하는 만큼
          // width, height 사용 가능 여부: 불가능
    
  2-2.✨ 박스를 구성하는 요소
    1) 박스를 구성하는 요소
      (1) border (테두리)
        - 각 영역이 차지하는 크기를 파악하기 위해, 레이아웃을 만들면서 그 크기를 시각적으로 확인할 수 있도록 만듦
        - border 세부 속성: 테두리 두께(border-width), 테두리 스타일(border-style), 테두리 색상(border-color)
        - 테두리 스타일에 대한 다양한 세부 속성
          https://developer.mozilla.org/ko/docs/Web/CSS/border-style
        
      (2) margin (바깥 여백)
        - 각각의 값은 top, right, bottom, left로 시계방향
        - 값을 두 개만 넣으면 top과 bottom이 첫 번째 설정, left 및 right가 두 번째 설정
        - 값을 하나만 넣으면 모든 방향의 바깥 여백에 적용
        - morgin 세부 속성: margin-top. margin-right, margin-bottom, margin-left
        - padding(안쪽 여백)에도 동일하게 적용됨
        - margin에는 음수 값 지정 가능. 여백에 음수 값을 지정하면 다른 엘리먼트와의 간격이 줄어듦
        - 개발도구에서 주황색~!
        
      (3) padding (안쪽 여백)
        - border를 기준으로 박스 내부의 여백을 지정
        - 값의 순서에 따른 방향은 margin과 동일하게 top, right, bottom, left
        - 개발도구에서 초록색~!
        
    2) 박스를 벗어나는 콘텐츠 처리
      - 박스 크기보다 콘텐츠 크기가 더 큰 경우에는 콘텐츠가 박스 바깥으로 빠져나옴
      - 이런 경우, 박스 크기에 맞게 콘텐츠를 더 이상 표시하지 않거나/ 스크롤을 추가하자!
      - 넘치는 콘텐츠 표시 안함: overflow: hidden; 으로 설정하기 = 콘텐츠가 넘치는 경우 숨김
      - 스크롤 추가하기: overflow: auto; 로 설정하기 = 콘텐츠가 넘치는 경우 스크롤을 생성함
      - overflow 속성은 x축과 y축을 지정
        가로 방향으로 스크롤 하거나 세로 방향으로 스크롤 할 수 있게끔 지정 가능
        overflow-x 속성과 overflow-y 속성을 이용하자!
      
    3) 박스 크기 측정 기준
      - 박스의 크기를 디자인할 때 콘텐츠 영역만 고려하면, 개발 과정에서 처음 생각한 레이아웃을 벗어날 수 있음
      - 박스에 적용할 여백을 고려하지 않고 박스의 크기를 디자인하면 설정한 영역을 넘어감
      
      - 레이아웃 디자인을 조금 더 쉽게 하는 방법: 여백과 테두리 두께를 포함해서 박스 크기를 계산하면 된다~
      - *은 모든 요소를 선택하는 셀렉터:
        모든 요소를 선택해 box-sizing 속성을 추가 > border-box라는 값을 추가
      - 모든 요소에 box-sizing: border-box를 적용:
        모든 박스에서 여백과 테두리를 포함한 크기로 계산됨
      - box-sizing은 HTML 문서 전체에 적용
      
      * 박스 크기 측정 기준 두 가지
        (1) content-box
          - 박스의 크기를 측정하는 기본값
          - 여백의 크기를 고려해 설정해야함
          
        (2) box-sizing
          - 여백과 테두리를 포함하는 값
          - content-box보다 사용이 용이함. 권장합니다~!

#Chapter3. CSS Selector
  3-1. 다양한 CSS selector
    - CSS 속성을 적용할 대상을 선택하는 방법을 CSS selector라고 함
    1) 기본 셀렉터
      (1) 전체 셀렉터
        - * { }
        - 문서의 모든 요소를 선택함
        
      (2) 태그 셀렉터
        - h1 { } / div { } / section, h1 { } 
        - 같은 태그명을 가진 모든 요소를 선택. 복수로도 선택 가능
        
      (3) ID 셀렉터
        - #only { }
        - #id로 입력하여 선택
        
      (4) class 셀렉터
        - .widget { } / .center { }
        - .class로 입력하여 선택. 같은 class를 가진 모든 요소를 선택
        
      (5) attribute 셀렉터 ❓
        - a[href] { } / p[id="only"] { } / p[class~="out"] { } / p[class|="out"] { } / section[id^="sect"] { } / div[class$="2"] { } / div[class*="w"] { }
        - 같은 속성을 가진 요소를 선택
      
    2) 자식 / 후손 / 형제 셀렉터
      (1) 자식 셀렉터
        - header > p { }
        - 첫 번째로 입력한 요소의 바로 아래 자식인 요소를 선택함
        - 즉, <header> <p> <span> <p></p> </span> </p> </header> 의 경우,
          header의 바로 아래 자식요소인 p만 선택한 경우!
        
      (2) 후손 셀렉터
        - header p {}
        - 첫 번째로 입력한 요소의 후손을 선택
        - 즉, <header> <p> <span> <p></p> </span> </p> </header> 의 경우,
          header의 후손요소인 p, span, p를 선택한 경우!
        
      (3) 형제 셀렉터
        - section ~ p { }
        - 같은 부모 요소를 공유하면서, 첫 번째 입력한 요소 뒤에 오는 두 번째 입력한 요소를 모두 선택
        - 즉, <header> <section> </section> <p></p> <p></p> <p></p> </header>의 경우,
          section 요소 뒤에 있는 세 개의 p를 선택한 경우!

      (4) 인접 형제 셀렉터
        - 
      
    3) 기타 셀렉터
      (1) 
      (2) 
      (3) 
      (4) 
      (5) 
    
  3-2. CSS selector 연습
    
