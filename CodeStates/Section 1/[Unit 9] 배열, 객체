#Chapter1. 배열
  1. 배열 기초
    - 배열 : 순서가 있는 값
    - 값 = 요소(element)
    - ✨ 순서 = 인덱스, 1이 아닌 0부터 번호를 매김 ✨
    - 값은 인덱스를 이용해 접근함
    - ✨ 배열로 할 수 있는 것들 ✨
      ㄴ 길이를 알 수 있음
        => myNumber.lengh; 로 확인 가능
      ㄴ 요소(element) 추가 가능
        => myNumber.push(값); 로 배열의 끝에 값 추가 가능
      ㄴ 요소(element) 삭제 가능
        => myNumber.pop(값); 로 배열의 마지막 값 삭제 가능

    ex) let myNumber = [73, 98, 86, 61, 96]
    - 대괄호를 이용해 배열 생성 > 각 원소를 쉼표로 구분해줌
    - myNumber[3]; // 61
    - myNumber[3] = 200; // 인덱스의 값 변경. 61 > 200
    
    ex) let myNumber = [[13, 30], [73, 8], [44, 17]];
    - 이 같은 형식을 '이차원 배열' 이라고 함.
    
    - .(온점)을 이용해서 변수가 가지고 있는 속성(property)에 접근할 수 있음
    - .(온점)을 이용해서 관련된 명령(method)을 실행할 수 있음/ 명령의 실행할 땐 괄호를 열고 닫는 형태로 실행.
    
  2. 배열의 반복
    1. 개념학습
      - 반복문과 배열을 응용해 문제를 푸는 방법에 대해 학습한다.
      
    2. 예제1) 반복문을 이용해 배열의 요소를 한 번 씩 출력하기
      let myNum = [73, 98, 86, 61];
      - 목적) 배열 myNum의 n번째 인덱스를 출력
        => console.log(myNum[n])
      
      - 조건1) 숫자(n)는 0부터 시작한다
        => let n = 0;
      - 조건2) 숫자(n)를 배열의 길이보다 작을때까지 반복한다
        =>  n < myNum.length;
      - 조건3) 숫자(n)는 1씩 증가한다
        => n++;
      
      - 결과)
        for(let n = 0; n < myNum.length; n++) {
          console.log(myNum[n]);
        }
      
      3. 예제2) myNum의 모든 element를 누적해서 더하기 위해 필요한 조건과, 반복할 구문은?
        let myNum = [10, 20, 40, 10];
        let sum = 0;
        
        for(let n = 0; n < myNum.length; n++){
          sum = sum + myNum[n];
        }
        
        console.log(sum); // 80
    
  3. 배열 메서드
    1. 개념학습1 : Array.isArray
      - JS의 특정 값이 배열인지 아닌지 판별할 수 있는 Array.isArray에 대해 학습한다.
        
        let words = ['피', '땀', '눈물'];
      
      - typeof 값 의 사용
        ㄴ typeof '문자열' => "string"
        ㄴ typeof 123 => "number"
        ㄴ typeof words => "object" (위의 선언이 있어서 가능)
        ㄴ typeof [1, 2, 3] => "object"
        ㄴ typeof {a:1} => "object"
        // 배열과 객체의 구분이 불가능하다 !!! => 전부 object 결과값으로 나옴
        
      - Array.isArray()의 사용
        ㄴ Array.isArray('문자열') => false
        ㄴ Array.isArray(123) => false
        ㄴ Array.isArray(words) => true (위의 선언이 있어서 가능)
        ㄴ Array.isArray([1, 2, 3]) => true
        ㄴ Array.isArray([]) => true
        ㄴ Array.isArray({a:1}) => false
        // 배열과 객체의 구분이 가능하다 !!! => 배열 = true / 객체 = false 로 나옴
    
    2. 개념학습2 : push, pop / shift, unshift
      - 배열의 요소를 push, pop 을 활용하여 추가 및 삭제해본다.
      
        let arr = ['code', 'states'];
        
        +) console.log(arr); 대신, console.table(arr) 찍으면 테이블 형식으로 찍혀 나옴(index 와 value 값으로)
      
      - arr.push() 메소드의 사용 // 뒷 쪽 값 부터 추가
        ㄴ arr.push('pre')
        
      - arr.pop() 메소드의 사용 // 뒷 쪽 값 부터 제거
        ㄴ arr.pop('pre')
        
      - arr.shift() // 앞 쪽 값 부터 제거
      
      - arr.unshift() // 앞 쪽 값 부터 추가
    
    3. 개념학습3 : indexOf, includes
      - JS의 특정 값이 배열에 포함되어 있는지 확인할 수 있는 indexOf, includes에 대해 학습한다.
        
        let words = ['Radagast', 'the', 'Brown'];        
        
      - words.indexOf() 의 사용
        ㄴ words.indexOf('the') => 배열의 값이 들어있는 인덱스 값이 출력됨
        
      - 

#Chapter2. 객체

