#Chapter1. 레이아웃
  - 각각의 요소를 목적에 맞게 배치하는 것을 레이아웃이라고 한다~
  
  1-1. 와이어프레임
    1. 와이어프레임(Wireframe)
      - 웹 또는 애플리케이션을 개발할 때 레이아웃의 뼈대를 그리는 단계
      - 단순한 선이나, 도형으로 웹이나 앱의 인터페이스를 시각적으로 묘사한 것
      - 레이아웃과 제품의 구조를 보여주는 용도
    
    2. 목업(Mock-up)
      - 실물 크기의 모형을 의미
      - HTML을 하드코딩(변수 없이 하나하나 값을 직접입력하는 과정)을 통해 구현
    
  1-2. 화면을 나누는 방법
    1. HTML 구성하기
      - 대부분의 경우 콘텐츠의 흐름은 좌에서 우, 위에서 아래로 흐름
      - CSS로 화면을 구분할 때는 수직 분할과 수평 분할을 차례대로 적용하여 콘텐츠의 흐름을 따라 작업을 진행
      - 클래스 이름과 구현을 1:1로 일치시켜 아주 작은 단위로 CSS를 작성 기법을 Atomic CSS 방법론이라고 함
        ㄴ https://www.sitepoint.com/css-architecture-block-element-modifier-bem-atomic-css
    
    2. 레이아웃 리셋
      - HTML 문서는 기본적인 스타일을 가지고 있음
      - HTML 문서가 갖는 기본 스타일이 레이아웃을 잡는 데 방해가 될 수도 있음
        ㄴ 예시)
          - 박스의 시작을 정확히 (0,0)의 위치에서 시작하고 싶은데, <body> 요소가 가진 기본 스타일에 약간의 여백이 있음
          - width, height 계산이 여백을 포함하지 않아 계산에 어려움이 있음 (이전회차: 박스 크기 측정 기준(box-sizing)에 대해 학습한 내용)
          - 브라우저(크롬, 사파리 등)마다 여백이나 글꼴과 같은 기본 스타일이 조금씩 다름

      - 위에 언급한 문제를 해결할 몇 줄의 코드를 적용시키면, 기본 스타일링을 제거 가능

#Chapter2. Flexbox
  - flex(flexible)는 "잘 구부러지는, 유연한"이라는 뜻
  - Flexbox로 레이아웃을 구성한다는 것은, 박스를 유연하게 늘리거나 줄여 레이아웃을 잡는것
  
  2-1. Flexbox 따라하기 1
    1)✨ display: flex 분석하기
      - display: flex 는 부모 박스 요소에 적용 > 자식 박스의 방향과 크기를 결정하는 레이아웃 구성 방법
      - Flexbox 속성들을 활용하면 요소의 정렬, 요소가 차지하는 공간을 설정 가능
      
      * [Section1] Unit6 파일에서 실습
      - <div> 요소들은 별다른 설정을 해주지 않으면 위쪽에서부터 세로로 정렬 + 가로로 넓게 공간을 차지함
      - 부모 요소에 disply: flex 속성을 적용 >
      -✨ 자식 요소인 <div> 요소들이 왼쪽부터 가로로 정렬된 것과 내용만큼의 공간을 차지함!!!!!
      
    2)✨ 부모 요소에 적용해야하는 Flexbox 속성들
      -✨ Flexbox 속성을 사용할 때 유의해야할 점: 속성을 지정해주는 위치
        ㄴ Flexbox 속성중에서는 부모 요소에 적용해야하는 속성/ 자식 요소에 적용해야하는 속성이 있음
      - 부모 요소에 적용해야 하는 속성들 = 자식 요소들의 정렬과 관련 있음
      
      (1)✨ flex-direction : 정렬 축 정하기
        - flex-direction: 부모 요소에 설정해주는 속성 + 자식 요소들을 정렬할 정렬 축을 정함
        - 아무 설정도 해주지 않으면 기본적으로 가로 정렬
      
      (2)✨ flex-wrap : 줄 바꿈 설정하기
        - flex-wrap: 하위 요소들의 크기가 상위 요소의 크기를 넘으면 자동 줄 바꿈을 할 것인지 정함
        - 설정해 주지 않으면 줄 바꿈을 하지 않음
      
      (3)✨ justify-content : 축 수평 방향 정렬 ✨
        - justify-content: 자식 요소들을 축의 수평 방향으로 어떻게 정렬할 것인지 정함
        - 가로로 정렬되어 있다면 가로 방향으론 어떻게 정렬할건지
          세로로 정렬되어 있다면 세로 방향으론 어떻게 정렬할건지
        - 주요 속성값으로는 flex-start , flex-end, center, space-between, space-around
        
      (4)✨ align-items : 축 수직 방향 정렬 ✨
        - align-items: 자식 요소들을 축의 수직 방향으로 어떻게 정렬할 것인지 정함
        - 가로로 정렬되어 있다면 세로 방향으론 어떻게 정렬할건지
          세로로 정렬되어 있다면 가로 방향으론 어떻게 정렬할건지
        - 주요 속성값으로는 stretch , flex-start , flex-end , center , baseline
        
    3)✨ 자식 요소에 적용해야하는 Flexbox 속성들
      - 자식 요소에게 적용해야 하는 속성인 flex 는 요소가 차지하는 공간과 관련 있음
      
      (*) flex 속성의 값
        - flex 속성: 세 가지 값을 지정 가능
        - flex:   <grow(팽창 지수)>    <shrink(수축 지수)>    <basis(기본 크기)>
          ㄴ grow(팽창 지수) 는 요소의 크기가 늘어나야 할 때 얼마나 늘어날 것인지
          ㄴ shrink(수축 지수) 는 요소의 크기가 줄어들어야 할 때 얼마나 줄어들 것인지
          ㄴ basis(기본 크기) 는 늘어나고 줄어드는 것과 상관없이 요소의 기본 크기는 얼마인지
          
        - 자식 요소에 flex 속성을 따로 설정해주지 않으면 기본값이 적용 + 왼쪽에서부터 오른쪽으로 콘텐츠의 크기만큼 배치됨
        - 기본값 = flex: 0 1 auto;
        - flex 속성 안에 세 가지 값을 한 번에 설정해줄 필요 없음 + 각 값을 따로 지정 가능
        
      (1) grow : 자식 박스는 얼마나 늘어날 수 있을까요?
        - grow: 요소의 크기가 늘어나야 할 때 얼마나 늘어날 것인지를 의미
        - 
        
      (2) shrink : 자식 박스는 얼마나 줄어들 수 있을까요?
        - 
        
      (3) basis : 이 박스의 기본 크기는 얼마일까요?
        - basis(기본 크기): 자식 박스가 flex-grow 나 flex-shrink 에 의해 늘어나거나 줄어들기 전에 가지는 기본 크기
        - flex-grow 가 0일 때, basis 크기를 지정하면 그 크기는 유지됨
        
        - flex-grow 속성의 값이 0인 경우에만 flex-basis 속성의 값이 유지됨
        - diplay 속성에 flex 가 적용된 컨테이너 내부에 존재하는 자식 박스는 경우에 따라
          basis 로 설정된 크기가 항상 유지되는 것은 아님
        - flex-grow 속성의 값이 양수일 경우 > 늘어나면서 flex-basis 속성에 적용한 값보다 커질 수도 있음
      
      (*) 추가
        - width와 flex-basis를 동시에 적용하는 경우, flex-basis가 우선됩니다.
        - 콘텐츠가 많아 자식 박스가 넘치는 경우, width가 정확한 크기를 보장하지 않습니다.
        - (flex-basis를 사용하지 않는다면) 콘텐츠가 많아 자식 박스가 넘치는 경우를 대비해,
          width 대신 max-width를 쓸 수 있습니다.
    
  2-2. Flexbox 따라하기 2

#Chapter3. 실습_계산기 목업
